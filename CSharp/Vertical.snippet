<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Vertical Command (no return value)</Title>
      <Author>Carl-Hugo Marcotte</Author>
      <Description><![CDATA[
        Creates all classes needed for a vertical slice command scenario (that does not return a value) using MediatR, FluentValidation, and AutoMapper.
        This snippet should be generated inside an existing and empty "use case class"; ex.: `public class DeleteSomeEntity{ /* Use this snippet here */ }`.]]></Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>vplaincommand</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>AutoMapper</Namespace>
        </Import>
        <Import>
          <Namespace>FluentValidation</Namespace>
        </Import>
        <Import>
          <Namespace>MediatR</Namespace>
        </Import>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp" Delimiter="$"><![CDATA[public class Command : IRequest
        {
            // TODO: add the command properties
        }

        public class MapperProfile : Profile
        {
            public MapperProfile()
            {
                // TODO: Create mapping or delete this class
            }
        }

        public class Validator : AbstractValidator<Command>
        {
            public Validator()
            {
                // TODO: add the Command validation
            }
        }

        public class Handler : AsyncRequestHandler<Command>
        {
            protected override Task Handle(Command request, CancellationToken cancellationToken)
            {
                //TODO: add the use case logic
                throw new NotImplementedException();
            }
        }]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Vertical Command (with a return value)</Title>
      <Author>Carl-Hugo Marcotte</Author>
      <Description><![CDATA[
        Creates all classes needed for a vertical slice command scenario using MediatR, FluentValidation, and AutoMapper.
        This snippet should be generated inside an existing and empty "use case class"; ex.: `public class CreateSomeEntity { /* Use this snippet here */ }`.]]></Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>vcommand</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>AutoMapper</Namespace>
        </Import>
        <Import>
          <Namespace>FluentValidation</Namespace>
        </Import>
        <Import>
          <Namespace>MediatR</Namespace>
        </Import>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Object Editable="true">
          <ID>modelName</ID>
          <ToolTip>The model class that will be persisted.</ToolTip>
          <Default>modelName</Default>
          <Function>
          </Function>
          <Type>
          </Type>
        </Object>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[public class Command : IRequest<Result>
        {
            // TODO: add the command properties
        }

        public class Result
        {
            // TODO: add the result properties
        }

        public class MapperProfile : Profile
        {
            public MapperProfile()
            {
                CreateMap<Command, $modelName$>();
                CreateMap<$modelName$, Result>();
            }
        }

        public class Validator : AbstractValidator<Command>
        {
            public Validator()
            {
                // TODO: add the Command validation
            }
        }

        public class Handler : IRequestHandler<Command, Result>
        {
            public Task<Result> Handle(Command request, CancellationToken cancellationToken)
            {
                //TODO: add the use case logic
                throw new NotImplementedException();
            }
        }]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Vertical Razor Pages Form (Query and Command)</Title>
      <Author>Carl-Hugo Marcotte</Author>
      <Description><![CDATA[
        Creates all classes needed for a vertical slice Razor Page query and command scenario using MediatR, FluentValidation, and AutoMapper (like an Edit page).
        This snippet should be generated inside an existing Razor Page; ex.: `public class Edit : PageModel { /* Use this snippet here */ }`.]]></Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>vrazorform</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>AutoMapper</Namespace>
        </Import>
        <Import>
          <Namespace>FluentValidation</Namespace>
        </Import>
        <Import>
          <Namespace>MediatR</Namespace>
        </Import>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp" Delimiter="$"><![CDATA[public class Query : IRequest<Command>
        {
            // TODO: add the query properties (GET)
        }

        public class Command : IRequest<Result>
        {
            // TODO: add the command properties (the Form/POST)
        }

        public class Result
        {
            // TODO: add the result properties
        }

        public class MapperProfile : Profile
        {
            public MapperProfile()
            {
                // TODO: Create mapping or delete this class
            }
        }

        public class CommandValidator : AbstractValidator<Command>
        {
            public CommandValidator()
            {
                // TODO: add the Command validation
            }
        }

        public class QueryValidator : AbstractValidator<Query>
        {
            public QueryValidator()
            {
                // TODO: add the Command validation
            }
        }

        public class QueryHandler : IRequestHandler<Query, Command>
        {
            public Task<Command> Handle(Query request, CancellationToken cancellationToken)
            {
                //TODO: add the GET use case logic
                throw new NotImplementedException();
            }
        }

        public class CommandHandler : IRequestHandler<Command, Result>
        {
            public Task<Result> Handle(Command request, CancellationToken cancellationToken)
            {
                //TODO: add the POST use case logic
                throw new NotImplementedException();
            }
        }]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Vertical Razor Pages Query-only</Title>
      <Author>Carl-Hugo Marcotte</Author>
      <Description><![CDATA[
        Creates all classes needed for a vertical slice Razor Page query-only scenario using MediatR, FluentValidation, and AutoMapper (like a list/the index page).
        This snippet should be generated inside an existing Razor Page; ex.: `public class Index : PageModel { /* Use this snippet here */ }`.]]></Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>vrazorpage</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>AutoMapper</Namespace>
        </Import>
        <Import>
          <Namespace>FluentValidation</Namespace>
        </Import>
        <Import>
          <Namespace>MediatR</Namespace>
        </Import>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp" Delimiter="$"><![CDATA[public class Query : IRequest<Result>
        {
            // TODO: add the query properties (GET)
        }

        public class Result
        {
            // TODO: add the result properties
        }

        public class MapperProfile : Profile
        {
            public MapperProfile()
            {
                // TODO: Create mapping or delete this class
            }
        }

        public class Validator : AbstractValidator<Query>
        {
            public Validator()
            {
                // TODO: add the Command validation
            }
        }

        public class Handler : IRequestHandler<Query, Result>
        {
            public Task<Result> Handle(Query request, CancellationToken cancellationToken)
            {
                //TODO: add the GET use case logic
                throw new NotImplementedException();
            }
        }]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>